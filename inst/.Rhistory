cw = new.CytoscapeWindow ('tmp', g)
noa.names (cw@graph)
    g = new("graphNEL", edgemode = "directed")
    #g = initNodeAttribute(g, "type", "char", "undefined")
    #g = initNodeAttribute(g, "lfc", "numeric", 1)
    #g = initNodeAttribute(g, "label", "char", "default node label")
    nodeDataDefaults (g, attr='type') = ''
    nodeDataDefaults (g, attr='lfc') = 0.0
    nodeDataDefaults (g, attr='label') = ''
  
    g = initNodeAttribute(g, "count", "integer", 0)
    g = initEdgeAttribute(g, "edgeType", "char", "undefined")
    g = initEdgeAttribute(g, "score", "numeric", 0)
    g = initEdgeAttribute(g, "misc", "char", "default misc")
    g = graph::addNode("A", g)
    g = graph::addNode("B", g)
    g = graph::addNode("C", g)
    nodeData(g, "A", "type") = "kinase"
    nodeData(g, "B", "type") = "transcription factor"
    nodeData(g, "C", "type") = "glycoprotein"
    nodeData(g, "A", "lfc") = -3
    nodeData(g, "B", "lfc") = 0
    nodeData(g, "C", "lfc") = 3
    nodeData(g, "A", "count") = 2
    nodeData(g, "B", "count") = 30
    nodeData(g, "C", "count") = 100
    nodeData(g, "A", "label") = "Gene A"
    nodeData(g, "B", "label") = "Gene B"
    nodeData(g, "C", "label") = "Gene C"
    g = graph::addEdge("A", "B", g)
    g = graph::addEdge("B", "C", g)
    g = graph::addEdge("C", "A", g)
    edgeData(g, "A", "B", "edgeType") = "phosphorylates"
    edgeData(g, "B", "C", "edgeType") = "synthetic lethal"
    edgeData(g, "A", "B", "score") = 35
    edgeData(g, "B", "C", "score") = -12

noa.names (g)
noa.names (cw@graph)
cw = new.CytoscapeWindow ('tmp', g)
q ('no')
library (RCytoscape)
q ('no')
source ('unitTests/test_cytoscape.R')
test.selectNodes ()
test.setNodeOpacityDirect ()
traceback ()
q ('no')
source ('unitTests/test_cytoscape.R')
test.setNodeOpacityDirect ()
pairs
edge.names
Q
g = RCytoscape::makeSimpleGraph ()
edgeNames (g)
  g = addNode ('D', g)

edgeNames (g)
g
as.character (unlist (sapply (names (edges (g)), function (a) paste (a, edges (g)[[a]], sep='~'))))
 (unlist (sapply (names (edges (g)), function (a) paste (a, edges (g)[[a]], sep='~'))))
 (unlist (sapply (names (edges (g)), function (a)  {bs = edges (g)[[a]]; if (length (bs) > 0) paste (a, edges (g)[[a]], sep='~')))))
 (unlist (sapply (names (edges (g)), function (a)  {bs = edges (g)[[a]]; if (length (bs) > 0) paste (a, edges (g)[[a]], sep='~') })))
as.character  (unlist (sapply (names (edges (g)), function (a)  {bs = edges (g)[[a]]; if (length (bs) > 0) paste (a, edges (g)[[a]], sep='~') })))
q ('no')
source ('unitTests/test_cytoscape.R')
test.setNodeOpacityDirect ()
c
run.tests ()
Q
q ('no')
run.tests ()
source ('unitTests/test_cytoscape.R')
run.tests ()
q ('no')
source ('unitTests/test_cytoscape.R')
hideAllPanels (cy)
test.setEdgeOpacityRule ()
q ('no')
source ('unitTests/test_cytoscape.R')
test.setEdgeOpacityRule ()
source ('unitTests/test_cytoscape.R')
test.setEdgeOpacityRule ()
g = makeSimpleGraph ()
eda.names (g)
eda (g, 'score')
eda (g, 'edgeType')
source ('unitTests/test_cytoscape.R')
cw = test.setEdgeOpacityRule ()
edge.attribute.name = 'edgeType'
cw = new.CytoscapeWindow ('xxx', makeSimpleGraph ())
displayGraph (cw)
edge.attribute.name = 'edgeType'; aspect='Edge Opacity'; control.points = eda (cw@graph, 'edgeType'); opacities = as.character (c (50, 100, 250)); xml.rpc (obj@uri, 'Cytoscape.createContinuousEdgeVisualStyle', edge.attribute.name, aspect, control.points, opacities, FALSE)
edge.attribute.name = 'edgeType'; aspect='Edge Opacity'; control.points = eda (cw@graph, 'edgeType'); opacities = as.character (c (50, 100, 250)); xml.rpc (cw@uri, 'Cytoscape.createContinuousEdgeVisualStyle', edge.attribute.name, aspect, control.points, opacities, FALSE)
xml.rpc (cw@uri, 'Cytoscape.createDiscreteMapper', 'default', edge.attribute.name, aspect, '255', control.points, opacities)

control.points
control.points = as.character (control.points)
xml.rpc (cw@uri, 'Cytoscape.createDiscreteMapper', 'default', edge.attribute.name, aspect, '255', control.points, opacities)

q ('no')
source ('unitTests/test_cytoscape.R')
cw = test.setEdgeOpacityRule ()
opacities
default.style
edge.attribute.name
control.points
c
c
c
source ('unitTests/test_cytoscape.R')
cw = test.setEdgeOpacityRule ()
source ('unitTests/test_cytoscape.R'); cw = test.setEdgeOpacityRule ()
c
c
c
g
g = makeSimpleGraph ()
eda.names (g)
eda (g, 'score')
cw
source ('unitTests/test_cytoscape.R'); cw = test.setEdgeOpacityRule ()
c
c
c
traceback ()
q ('no')
source ('unitTests/test_cytoscape.R')
source ('unitTests/test_cytoscape.R'); cw = test.setEdgeOpacityRule ()
mode
c
mode
aspects
n
n
n
n
opacities
n
n
n
n
q ('no')
source ('unitTests/test_cytoscape.R'); cw = test.setEdgeOpacityRule ()
c
c
source ('unitTests/test_cytoscape.R'); cw = test.setEdgeOpacityRule ()
c
c
q ('no')
